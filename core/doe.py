"""
Initial experimental design generated by Latin hypercube sampling
"""

# Import necessary libraries
import numpy as np
import pyDOE as doe
import torch
from torch import Tensor

# Set default tensor type to double precision for numerical stability
torch.set_default_dtype(torch.float64)

# Function to convert data to unit scale and vice versa
def scale_data(X: Tensor, X_ranges: list, to_unit: bool = True):
    """
    Convert data between unit scale and real scale.
    
    Parameters
    ----------
    X: Tensor
        Data of true scale or unit scale.
    X_ranges: list
        The range of X values.
    to_unit: bool
        If True, converts to unit scale; if False, converts to real scale.
    
    Returns
    -------
    Tensor
        Scaled data (either unit scale or real scale).
    """
    X_ranges = Tensor(X_ranges)
    Xr_max, Xr_min = X_ranges[:, 1], X_ranges[:, 0]
    
    if to_unit:
        # Convert to unit scale
        return (X - Xr_min) / (Xr_max - Xr_min)
    else:
        # Convert back to real scale
        return X * (Xr_max - Xr_min) + Xr_min

# Latin Hypercube Sampling (LHS) function
def lhs(samples: int, n: int, seed: int = 555): 
    """
    Perform Latin Hypercube Sampling (LHS) with fixed random seed.
    
    Parameters
    ----------
    samples: int
        Number of samples.
    n: int
        Number of decision variables.
    seed: int, optional
        Random seed for reproducibility.
    
    Returns
    -------
    lhs_unit: Tensor
        Results of the initial sampling in unit scale.
    """
    np.random.seed(seed)
    lhs_unit = doe.lhs(n, samples=samples, criterion="c")
    return torch.tensor(lhs_unit, dtype=torch.float32)

# Function to calculate Y values from LHS samples (example)
def Y_lhs(lhs_unit:Tensor,objective_func:object,X_ranges:list,Y_obj:int): 
    """
    Get the initial response
    
    Parameters
    ----------
    lhs_unit: Tensor
        Results of initial sampling
    objective_func:object
        Objective function
    X_ranges:list
        The value range of X
    Y_obj: int
         The objective type (e-factor, conversion).
        
    Returns
    --------
    results: Tensor
        Initial response
    """
    X_lhs_real = scale_data(lhs_unit ,X_ranges, to_unit=0)# Translate into the true scale
    results = []  
    
    for i in X_lhs_real:
        y = objective_func(i) # Get the initial responses
        results.append(y)
    results = Tensor(results)
    if len(results.shape) == 1: #If 1D, make it 2D 
        results =results.reshape(len(results),1)
    return results

def StandardScaler(X:Tensor):  
    mean = X.mean()
    std = X.std()
    return ((X-mean)/std).unsqueeze(1)

def StandardScaler_to_real(X:Tensor):
    mean = X.mean()
    std = X.std()
    return  (X*std+mean).unsqueeze(1)